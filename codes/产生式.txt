Program -> ClassDecl Program
Program -> e
ClassDecl -> "class" <ID> "extends" <ID> "{" VarMethodBlock "}"
ClassDecl -> "class" <ID> "{" VarMethodBlock "}"
VarMethodBlock -> VarDecl VarMethodBlock
VarMethodBlock -> MethodDecl VarMethodBlock
VarMethodBlock -> e
VarStateBlock -> VarDecl VarStateBlock
VarStateBlock -> Statement VarStateBlock
VarStateBlock -> e
MethodDecl -> "public" Type <ID> "(" Formals ")" "{" VarStateBlock "}"
MethodDecl -> "public" "void" <ID> "(" Formals ")" "{" VarStateBlock "}"
MethodDecl -> "public" "static" "void" "main" "(" "String" "[" "]" ")" "{" VarStateBlock "}"
Formals -> Type <ID> Formals'
Formals -> e
Formals' -> "," Type <ID>
Formals' -> e
VarDecl -> Type <ID> ";"
VarDecl -> Type <ID> "=" FullExpr ";"
Type -> ElmType
Type -> ElmType "[" "]"
ElmType -> "boolean"
ElmType -> "int"
ElmType -> <ID>
ElmType -> "double"
ElmType -> "String"
StateBlock -> "{" Statements "}"
StateBlock -> Statement
Statements -> Statement Statements
Statements -> e
Statement -> LValue "=" FullExpr ";"
Statement -> LValue "(" Params ")" ";"
Statement -> "if" "(" Expr ")" StateBlock
Statement -> "if" "(" Expr ")" StateBlock "else" StateBlock
Statement -> "while" "(" Expr ")" StateBlock
Statement -> "println" "(" PrintParams ")" ";"
Statement -> "return" Expr ";"
Params -> Expr Params'
Params -> e
Params' -> "," Expr Params'
Params' -> e
PrintParams -> Expr
PrintParams -> <STR>
FullExpr -> "new" ElmType "[" <INT> "]"
FullExpr -> "new" <ID> "(" Params ")"
FullExpr -> Expr
Binop -> "+"
Binop -> "-"
Binop -> "*"
Binop -> "/"
Binop -> "&&"
Binop -> "||"
Binop -> "=="
Binop -> "!="
Binop -> "<"
Binop -> "<="
Binop -> ">"
Binop -> ">="
Unop -> "-"
Unop -> "!"
Expr -> "(" Expr ")" Expr'
Expr -> Unop Expr Expr'
Expr -> LValue "(" Params ")" Expr'
Expr -> LValue Expr'
Expr -> Literal Expr'
Expr -> e
Expr' -> Binop Expr Expr'
Expr' -> Binop Expr Expr'
Expr' -> e
LValue -> "this" "." <ID> Deref'
LValue -> <ID> Deref'
LValue -> "this" "." <ID>
LValue -> <ID>
Deref' -> Deref Deref'
Deref' -> e
Deref -> "[" Expr "]"
Deref -> "." <ID>
Literal -> <INT>
Literal -> <DOUBLE>
Literal -> <STR>
Literal -> "true"
Literal -> "false"